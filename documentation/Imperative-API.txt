---
name: Imperative API
route: /imperative
order: 2
---

import { Playground, PropsTable } from 'docz'
import { Provider, Consumer } from './'
import {   AnimatedValue,
  animated,
  interpolate,
  controller as spring, } from '../src/targets/web'

# Imperative API

```jsx
import {
  AnimatedValue,
  animated,
  interpolate,
  controller as spring,
} from 'react-spring'
```
## Basics

While react-spring has its main focus on declarative animation you can stll control your animations imperatively if you need to. In principle this is almost the same way react-native handles animation using the `animated` library. You create an animated value, then cause it to tween with a controller. You put the animated value into your styles, where it is applied. Be sure to read the [native performance](/native) section before attempting to use this.

<Playground style={{ overflow: 'hidden', height: 200, width: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
  <Consumer>
    {() => {
      const animation = new AnimatedValue(1)
      const hover = () => spring(animation, { to: 2, tension: 200, friction: 30 }).start()
      const unhover = () => spring(animation, { to: 1, tension: 0, friction: 1 }).start()
      return (
        <animated.div
          style={{
          display: 'inline-block',
          padding: 30,
          backgroundColor: animation.interpolate({ range: [1, 2], output: ['#28d79f', '#c23369'] }),
          transform: interpolate(
            [animation, animation.interpolate({ range: [1, 2], output: ['0deg', '45deg'] })],
            (s, r) => 'scale(' + s + ') rotate3d(0,0,1,' + r + ')'
          )}}
          onMouseOver={hover}
          onMouseOut={unhover}>
          Hover me ðŸ˜±
        </animated.div>
    )}}
  </Consumer>
</Playground>